import shared
import asyncio
from shared import access_manager, ADMIN_ID, bot_instance, admin_only
from aiogram import Router, types, Bot
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from shared import access_manager, main_menu_keyboard, ADMIN_ID, db
from menu import generate_menu

router = Router()

def build_approve_keyboard(user_id: int):
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data=f"approve_{user_id}")]]
    )


async def handle_access_request(user_id: int, username: str, message_func):
    if access_manager.check_access(user_id):
        await message_func("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É!")
        return

    requests = access_manager.load_access_requests()
    if str(user_id) in requests:
        await message_func("–í–∞—à –∑–∞–ø—Ä–æ—Å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        return

    access_manager.add_access_request(user_id, username)
    await message_func("–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

    try:
        bot = shared.bot_instance
        approve_button = build_approve_keyboard(user_id)
        await bot.send_message(
            ADMIN_ID,
            f"üì• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –∑–∞–ø—Ä–æ—Å–∏–ª –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É.",
            reply_markup=approve_button
        )
        print(f"[ACCESS] –ó–∞–ø—Ä–æ—Å –æ—Ç {username} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É")
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")


@router.message(Command("request_access"))
async def request_access_command(message: types.Message):
    await handle_access_request(
        user_id=message.from_user.id,
        username=message.from_user.full_name,
        message_func=message.answer
    )


@router.callback_query(lambda c: c.data == "request_access")
async def inline_request_access(callback_query: types.CallbackQuery):
    await handle_access_request(
        user_id=callback_query.from_user.id,
        username=callback_query.from_user.full_name,
        message_func=lambda text: callback_query.message.edit_text(text)
    )


@router.callback_query(lambda c: c.data.startswith("approve_"))
async def approve_access(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split("_")[1])

    if access_manager.grant_access(user_id):
        await callback_query.message.edit_text(f"‚úÖ –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID: {user_id}")

        try:
            bot = shared.bot_instance
            await bot.send_message(
                chat_id=user_id,
                text="–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞!"
            )
            
            await bot.send_message(
                chat_id=user_id,
                text=(
                    "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∏ —Ä–æ—Å—Ç–∞! üî•\n\n"
                    "–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å –≤—Å—ë, —á—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å—Ç–∞—Ç—å –ª–∏–¥–µ—Ä–æ–º: "
                    "–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏, —Ç–µ—Ö–Ω–∏–∫–∏ –ø—Ä–æ–¥–∞–∂, –º–æ—Ç–∏–≤–∞—Ü–∏—é –∑–∞ —Å–¥–µ–ª–∫–∏ –∏ —É—Å–ª–æ–≤–∏—è –Ω–∞—à–∏—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤. "
                    "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —ç—Ç–æ —à–∞–Ω—Å –¥–æ–±–∏—Ç—å—Å—è –±–æ–ª—å—à–µ–≥–æ! üöÄ"
                ),
                reply_markup=shared.main_menu_keyboard
            )

            from menu import generate_menu
            await bot.send_message(
                chat_id=user_id,
                text="–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º —Å–µ–≥–æ–¥–Ω—è? üòâ",
                reply_markup=generate_menu("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    else:
        await callback_query.message.edit_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {user_id} —É–∂–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø.")

@router.message(Command("list_allowed_users"))
@admin_only
async def list_allowed_users(message: types.Message, **kwargs):
    allowed_users = access_manager.list_allowed_users()
    if not allowed_users:
        await message.answer("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º –ø—É—Å—Ç.")
        return

    user_info_list = []
    for user_id, name in allowed_users.items():
        user_info_list.append(f"{name} (ID: {user_id})")
    users_list = "\n".join(user_info_list)
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –¥–æ—Å—Ç—É–ø–æ–º:\n{users_list}")


@router.message(Command("remove_access"))
@admin_only
async def remove_access(message: types.Message, **kwargs):
    print("üîß –°—Ä–∞–±–æ—Ç–∞–ª–∞ –∫–æ–º–∞–Ω–¥–∞ /remove_access")
    command_parts = message.text.split()
    if len(command_parts) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: /remove_access [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]")
        return

    try:
        user_id = int(command_parts[1])
    except ValueError:
        await message.answer("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    if access_manager.remove_access(user_id):
        await message.answer(f"–î–æ—Å—Ç—É–ø —É–¥–∞–ª—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {user_id}")
        try:
            await bot_instance.send_message(
                user_id,
                "–í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ—Å—Ç—É–ø–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /request_access."
            )
            await bot_instance.send_message(
                user_id,
                "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∏ —Ä–æ—Å—Ç–∞! üî•\n\n"
                "–ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /request_access."
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    else:
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö.")

access_router = router
