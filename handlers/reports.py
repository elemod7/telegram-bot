from aiogram import Router, types
from aiogram.filters import Command
import shared 
from shared import db, admin_only
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

router = Router()

@router.message(Command("report"))
@admin_only
async def generate_report(message: types.Message):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    try:
        report_data = await db.generate_daily_report()
        if not report_data:
            await message.answer("üìä –û—Ç—á—ë—Ç –ø—É—Å—Ç: —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
            return

        await message.answer(
            f"üìä –û—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n{report_data}",
            parse_mode="Markdown"
        )

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")

@router.message(Command("clear_logs"))
@admin_only
async def clear_logs(message: types.Message):
    """–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)."""
    try:
        await db.clear_logs()
        await message.answer("‚úÖ –õ–æ–≥–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–≥–æ–≤: {e}")

@router.message(Command("send_report"))
@admin_only
async def send_report_to_admin(message: types.Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ –∞–¥–º–∏–Ω—É."""
    try:
        report_data = await db.generate_daily_report()
        if not report_data:
            await message.answer("üìä –û—Ç—á—ë—Ç –ø—É—Å—Ç: —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
            return

        await shared.bot_instance.send_message(
            shared.ADMIN_ID, 
            f"üìä –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç:\n\n{report_data}",
            parse_mode="Markdown"
        )
        await message.answer("üì§ –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É.")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á—ë—Ç–∞: {e}")
