import os
import asyncio
from aiogram import Router, types
from aiogram.types import FSInputFile
from menu import MENU_STRUCTURE, CONTENT, PDF_FILES, generate_menu
from shared import access_required, db

router = Router()

@router.callback_query()
@access_required
async def handle_menu_callbacks(callback_query: types.CallbackQuery):
    menu_key = callback_query.data
    user_id = callback_query.from_user.id
    username = callback_query.from_user.full_name

    button_text = None
    for menu_section in MENU_STRUCTURE.values():
        for key, value in menu_section.items():
            if value == menu_key:
                button_text = key
                break
        if button_text:
            break

    action_text = f"–ù–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: {button_text}" if button_text else f"–í—ã–±—Ä–∞–ª {menu_key}"
    await db.log_action(user_id, username, action_text)

    if menu_key in CONTENT:
        await callback_query.message.answer(CONTENT[menu_key], parse_mode="Markdown")
        return

    if menu_key in MENU_STRUCTURE:
        try:
            await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:", reply_markup=generate_menu(menu_key))
        except Exception:
            await callback_query.message.answer("–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:", reply_markup=generate_menu(menu_key))
        return

    if menu_key in PDF_FILES:
        file_path = PDF_FILES[menu_key]
        await callback_query.answer()
        try:
            sending_message = await callback_query.bot.send_message(user_id, 
                "üìÇ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ ‚è≥")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            sending_message = None

        try:
            if os.path.exists(file_path):
                await callback_query.bot.send_document(user_id, FSInputFile(file_path))
            else:
                await callback_query.bot.send_message(user_id, 
                    "‚ö†Ô∏è –≠—Ç–æ—Ç —Ñ–∞–π–ª –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û–Ω –ø–æ—è–≤–∏—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
        except Exception as e:
            await callback_query.bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
        finally:
            if sending_message:
                try:
                    await sending_message.delete()
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return

    try:
        await callback_query.answer("–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ.", show_alert=True)
    except Exception:
        pass
